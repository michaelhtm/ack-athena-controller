// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package work_group

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/athena"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/athena/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/athena-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.WorkGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetWorkGroupOutput
	resp, err = rm.sdkapi.GetWorkGroup(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetWorkGroup", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "InvalidRequestException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.WorkGroup.Configuration != nil {
		f0 := &svcapitypes.WorkGroupConfiguration{}
		if resp.WorkGroup.Configuration.AdditionalConfiguration != nil {
			f0.AdditionalConfiguration = resp.WorkGroup.Configuration.AdditionalConfiguration
		}
		if resp.WorkGroup.Configuration.BytesScannedCutoffPerQuery != nil {
			f0.BytesScannedCutoffPerQuery = resp.WorkGroup.Configuration.BytesScannedCutoffPerQuery
		}
		if resp.WorkGroup.Configuration.CustomerContentEncryptionConfiguration != nil {
			f0f2 := &svcapitypes.CustomerContentEncryptionConfiguration{}
			if resp.WorkGroup.Configuration.CustomerContentEncryptionConfiguration.KmsKey != nil {
				f0f2.KMSKey = resp.WorkGroup.Configuration.CustomerContentEncryptionConfiguration.KmsKey
			}
			f0.CustomerContentEncryptionConfiguration = f0f2
		}
		if resp.WorkGroup.Configuration.EnableMinimumEncryptionConfiguration != nil {
			f0.EnableMinimumEncryptionConfiguration = resp.WorkGroup.Configuration.EnableMinimumEncryptionConfiguration
		}
		if resp.WorkGroup.Configuration.EnforceWorkGroupConfiguration != nil {
			f0.EnforceWorkGroupConfiguration = resp.WorkGroup.Configuration.EnforceWorkGroupConfiguration
		}
		if resp.WorkGroup.Configuration.EngineVersion != nil {
			f0f5 := &svcapitypes.EngineVersion{}
			if resp.WorkGroup.Configuration.EngineVersion.EffectiveEngineVersion != nil {
				f0f5.EffectiveEngineVersion = resp.WorkGroup.Configuration.EngineVersion.EffectiveEngineVersion
			}
			if resp.WorkGroup.Configuration.EngineVersion.SelectedEngineVersion != nil {
				f0f5.SelectedEngineVersion = resp.WorkGroup.Configuration.EngineVersion.SelectedEngineVersion
			}
			f0.EngineVersion = f0f5
		}
		if resp.WorkGroup.Configuration.ExecutionRole != nil {
			f0.ExecutionRole = resp.WorkGroup.Configuration.ExecutionRole
		}
		if resp.WorkGroup.Configuration.IdentityCenterConfiguration != nil {
			f0f7 := &svcapitypes.IdentityCenterConfiguration{}
			if resp.WorkGroup.Configuration.IdentityCenterConfiguration.EnableIdentityCenter != nil {
				f0f7.EnableIdentityCenter = resp.WorkGroup.Configuration.IdentityCenterConfiguration.EnableIdentityCenter
			}
			if resp.WorkGroup.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceArn != nil {
				f0f7.IdentityCenterInstanceARN = resp.WorkGroup.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceArn
			}
			f0.IdentityCenterConfiguration = f0f7
		}
		if resp.WorkGroup.Configuration.PublishCloudWatchMetricsEnabled != nil {
			f0.PublishCloudWatchMetricsEnabled = resp.WorkGroup.Configuration.PublishCloudWatchMetricsEnabled
		}
		if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration != nil {
			f0f9 := &svcapitypes.QueryResultsS3AccessGrantsConfiguration{}
			if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType != "" {
				f0f9.AuthenticationType = aws.String(string(resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType))
			}
			if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix != nil {
				f0f9.CreateUserLevelPrefix = resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix
			}
			if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants != nil {
				f0f9.EnableS3AccessGrants = resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants
			}
			f0.QueryResultsS3AccessGrantsConfiguration = f0f9
		}
		if resp.WorkGroup.Configuration.RequesterPaysEnabled != nil {
			f0.RequesterPaysEnabled = resp.WorkGroup.Configuration.RequesterPaysEnabled
		}
		if resp.WorkGroup.Configuration.ResultConfiguration != nil {
			f0f11 := &svcapitypes.ResultConfiguration{}
			if resp.WorkGroup.Configuration.ResultConfiguration.AclConfiguration != nil {
				f0f11f0 := &svcapitypes.ACLConfiguration{}
				if resp.WorkGroup.Configuration.ResultConfiguration.AclConfiguration.S3AclOption != "" {
					f0f11f0.S3ACLOption = aws.String(string(resp.WorkGroup.Configuration.ResultConfiguration.AclConfiguration.S3AclOption))
				}
				f0f11.ACLConfiguration = f0f11f0
			}
			if resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration != nil {
				f0f11f1 := &svcapitypes.EncryptionConfiguration{}
				if resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption != "" {
					f0f11f1.EncryptionOption = aws.String(string(resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption))
				}
				if resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.KmsKey != nil {
					f0f11f1.KMSKey = resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.KmsKey
				}
				f0f11.EncryptionConfiguration = f0f11f1
			}
			if resp.WorkGroup.Configuration.ResultConfiguration.ExpectedBucketOwner != nil {
				f0f11.ExpectedBucketOwner = resp.WorkGroup.Configuration.ResultConfiguration.ExpectedBucketOwner
			}
			if resp.WorkGroup.Configuration.ResultConfiguration.OutputLocation != nil {
				f0f11.OutputLocation = resp.WorkGroup.Configuration.ResultConfiguration.OutputLocation
			}
			f0.ResultConfiguration = f0f11
		}
		ko.Spec.Configuration = f0
	} else {
		ko.Spec.Configuration = nil
	}
	if resp.WorkGroup.Description != nil {
		ko.Spec.Description = resp.WorkGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.WorkGroup.Name != nil {
		ko.Spec.Name = resp.WorkGroup.Name
	} else {
		ko.Spec.Name = nil
	}

	rm.setStatusDefaults(ko)
	if ko.Status.ACKResourceMetadata != nil {
		// We need to build the resourceARN from accountID and region,
		// since it is not directly returned by the API.
		resourceARN := ackv1alpha1.AWSResourceName(fmt.Sprintf("arn:aws:athena:%s:%s:workgroup/%s",
			*ko.Status.ACKResourceMetadata.Region, *ko.Status.ACKResourceMetadata.OwnerAccountID, *ko.Spec.Name))

		// Set resourceARN to status
		ko.Status.ACKResourceMetadata.ARN = &resourceARN

		// Now we can fetch the tags using the manually constructed ARN
		tags, err := rm.getTags(ctx, string(resourceARN))
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = tags
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetWorkGroupInput, error) {
	res := &svcsdk.GetWorkGroupInput{}

	if r.ko.Spec.Name != nil {
		res.WorkGroup = r.ko.Spec.Name
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateWorkGroupOutput
	_ = resp
	resp, err = rm.sdkapi.CreateWorkGroup(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateWorkGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateWorkGroupInput, error) {
	res := &svcsdk.CreateWorkGroupInput{}

	if r.ko.Spec.Configuration != nil {
		f0 := &svcsdktypes.WorkGroupConfiguration{}
		if r.ko.Spec.Configuration.AdditionalConfiguration != nil {
			f0.AdditionalConfiguration = r.ko.Spec.Configuration.AdditionalConfiguration
		}
		if r.ko.Spec.Configuration.BytesScannedCutoffPerQuery != nil {
			f0.BytesScannedCutoffPerQuery = r.ko.Spec.Configuration.BytesScannedCutoffPerQuery
		}
		if r.ko.Spec.Configuration.CustomerContentEncryptionConfiguration != nil {
			f0f2 := &svcsdktypes.CustomerContentEncryptionConfiguration{}
			if r.ko.Spec.Configuration.CustomerContentEncryptionConfiguration.KMSKey != nil {
				f0f2.KmsKey = r.ko.Spec.Configuration.CustomerContentEncryptionConfiguration.KMSKey
			}
			f0.CustomerContentEncryptionConfiguration = f0f2
		}
		if r.ko.Spec.Configuration.EnableMinimumEncryptionConfiguration != nil {
			f0.EnableMinimumEncryptionConfiguration = r.ko.Spec.Configuration.EnableMinimumEncryptionConfiguration
		}
		if r.ko.Spec.Configuration.EnforceWorkGroupConfiguration != nil {
			f0.EnforceWorkGroupConfiguration = r.ko.Spec.Configuration.EnforceWorkGroupConfiguration
		}
		if r.ko.Spec.Configuration.EngineVersion != nil {
			f0f5 := &svcsdktypes.EngineVersion{}
			if r.ko.Spec.Configuration.EngineVersion.EffectiveEngineVersion != nil {
				f0f5.EffectiveEngineVersion = r.ko.Spec.Configuration.EngineVersion.EffectiveEngineVersion
			}
			if r.ko.Spec.Configuration.EngineVersion.SelectedEngineVersion != nil {
				f0f5.SelectedEngineVersion = r.ko.Spec.Configuration.EngineVersion.SelectedEngineVersion
			}
			f0.EngineVersion = f0f5
		}
		if r.ko.Spec.Configuration.ExecutionRole != nil {
			f0.ExecutionRole = r.ko.Spec.Configuration.ExecutionRole
		}
		if r.ko.Spec.Configuration.IdentityCenterConfiguration != nil {
			f0f7 := &svcsdktypes.IdentityCenterConfiguration{}
			if r.ko.Spec.Configuration.IdentityCenterConfiguration.EnableIdentityCenter != nil {
				f0f7.EnableIdentityCenter = r.ko.Spec.Configuration.IdentityCenterConfiguration.EnableIdentityCenter
			}
			if r.ko.Spec.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceARN != nil {
				f0f7.IdentityCenterInstanceArn = r.ko.Spec.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceARN
			}
			f0.IdentityCenterConfiguration = f0f7
		}
		if r.ko.Spec.Configuration.PublishCloudWatchMetricsEnabled != nil {
			f0.PublishCloudWatchMetricsEnabled = r.ko.Spec.Configuration.PublishCloudWatchMetricsEnabled
		}
		if r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration != nil {
			f0f9 := &svcsdktypes.QueryResultsS3AccessGrantsConfiguration{}
			if r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType != nil {
				f0f9.AuthenticationType = svcsdktypes.AuthenticationType(*r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType)
			}
			if r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix != nil {
				f0f9.CreateUserLevelPrefix = r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix
			}
			if r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants != nil {
				f0f9.EnableS3AccessGrants = r.ko.Spec.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants
			}
			f0.QueryResultsS3AccessGrantsConfiguration = f0f9
		}
		if r.ko.Spec.Configuration.RequesterPaysEnabled != nil {
			f0.RequesterPaysEnabled = r.ko.Spec.Configuration.RequesterPaysEnabled
		}
		if r.ko.Spec.Configuration.ResultConfiguration != nil {
			f0f11 := &svcsdktypes.ResultConfiguration{}
			if r.ko.Spec.Configuration.ResultConfiguration.ACLConfiguration != nil {
				f0f11f0 := &svcsdktypes.AclConfiguration{}
				if r.ko.Spec.Configuration.ResultConfiguration.ACLConfiguration.S3ACLOption != nil {
					f0f11f0.S3AclOption = svcsdktypes.S3AclOption(*r.ko.Spec.Configuration.ResultConfiguration.ACLConfiguration.S3ACLOption)
				}
				f0f11.AclConfiguration = f0f11f0
			}
			if r.ko.Spec.Configuration.ResultConfiguration.EncryptionConfiguration != nil {
				f0f11f1 := &svcsdktypes.EncryptionConfiguration{}
				if r.ko.Spec.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption != nil {
					f0f11f1.EncryptionOption = svcsdktypes.EncryptionOption(*r.ko.Spec.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption)
				}
				if r.ko.Spec.Configuration.ResultConfiguration.EncryptionConfiguration.KMSKey != nil {
					f0f11f1.KmsKey = r.ko.Spec.Configuration.ResultConfiguration.EncryptionConfiguration.KMSKey
				}
				f0f11.EncryptionConfiguration = f0f11f1
			}
			if r.ko.Spec.Configuration.ResultConfiguration.ExpectedBucketOwner != nil {
				f0f11.ExpectedBucketOwner = r.ko.Spec.Configuration.ResultConfiguration.ExpectedBucketOwner
			}
			if r.ko.Spec.Configuration.ResultConfiguration.OutputLocation != nil {
				f0f11.OutputLocation = r.ko.Spec.Configuration.ResultConfiguration.OutputLocation
			}
			f0.ResultConfiguration = f0f11
		}
		res.Configuration = f0
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.Tags != nil {
		f3 := []svcsdktypes.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdktypes.Tag{}
			if f3iter.Key != nil {
				f3elem.Key = f3iter.Key
			}
			if f3iter.Value != nil {
				f3elem.Value = f3iter.Value
			}
			f3 = append(f3, *f3elem)
		}
		res.Tags = f3
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	} else if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateWorkGroupOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateWorkGroup(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateWorkGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateWorkGroupInput, error) {
	res := &svcsdk.UpdateWorkGroupInput{}

	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.Name != nil {
		res.WorkGroup = r.ko.Spec.Name
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteWorkGroupOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteWorkGroup(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteWorkGroup", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteWorkGroupInput, error) {
	res := &svcsdk.DeleteWorkGroupInput{}

	if r.ko.Spec.Name != nil {
		res.WorkGroup = r.ko.Spec.Name
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.WorkGroup,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
